// Generated by gencpp from file ikwalk/test1.msg
// DO NOT EDIT!


#ifndef IKWALK_MESSAGE_TEST1_H
#define IKWALK_MESSAGE_TEST1_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ikwalk
{
template <class ContainerAllocator>
struct test1_
{
  typedef test1_<ContainerAllocator> Type;

  test1_()
    : time(0.0)
    , x_r(0.0)
    , y_r(0.0)
    , z_r(0.0)
    , yaw_r(0.0)
    , x_l(0.0)
    , y_l(0.0)
    , z_l(0.0)
    , yaw_l(0.0)  {
    }
  test1_(const ContainerAllocator& _alloc)
    : time(0.0)
    , x_r(0.0)
    , y_r(0.0)
    , z_r(0.0)
    , yaw_r(0.0)
    , x_l(0.0)
    , y_l(0.0)
    , z_l(0.0)
    , yaw_l(0.0)  {
  (void)_alloc;
    }



   typedef double _time_type;
  _time_type time;

   typedef double _x_r_type;
  _x_r_type x_r;

   typedef double _y_r_type;
  _y_r_type y_r;

   typedef double _z_r_type;
  _z_r_type z_r;

   typedef double _yaw_r_type;
  _yaw_r_type yaw_r;

   typedef double _x_l_type;
  _x_l_type x_l;

   typedef double _y_l_type;
  _y_l_type y_l;

   typedef double _z_l_type;
  _z_l_type z_l;

   typedef double _yaw_l_type;
  _yaw_l_type yaw_l;





  typedef boost::shared_ptr< ::ikwalk::test1_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ikwalk::test1_<ContainerAllocator> const> ConstPtr;

}; // struct test1_

typedef ::ikwalk::test1_<std::allocator<void> > test1;

typedef boost::shared_ptr< ::ikwalk::test1 > test1Ptr;
typedef boost::shared_ptr< ::ikwalk::test1 const> test1ConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ikwalk::test1_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ikwalk::test1_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ikwalk

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'ikwalk': ['/home/life/catkin_ws/src/ikwalk/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ikwalk::test1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ikwalk::test1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ikwalk::test1_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ikwalk::test1_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ikwalk::test1_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ikwalk::test1_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ikwalk::test1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bf2766ece311a349a812ea9852f3112d";
  }

  static const char* value(const ::ikwalk::test1_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xbf2766ece311a349ULL;
  static const uint64_t static_value2 = 0xa812ea9852f3112dULL;
};

template<class ContainerAllocator>
struct DataType< ::ikwalk::test1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ikwalk/test1";
  }

  static const char* value(const ::ikwalk::test1_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ikwalk::test1_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 time\n\
float64 x_r\n\
float64 y_r\n\
float64 z_r\n\
float64 yaw_r\n\
float64 x_l\n\
float64 y_l\n\
float64 z_l\n\
float64 yaw_l\n\
";
  }

  static const char* value(const ::ikwalk::test1_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ikwalk::test1_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time);
      stream.next(m.x_r);
      stream.next(m.y_r);
      stream.next(m.z_r);
      stream.next(m.yaw_r);
      stream.next(m.x_l);
      stream.next(m.y_l);
      stream.next(m.z_l);
      stream.next(m.yaw_l);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct test1_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ikwalk::test1_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ikwalk::test1_<ContainerAllocator>& v)
  {
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
    s << indent << "x_r: ";
    Printer<double>::stream(s, indent + "  ", v.x_r);
    s << indent << "y_r: ";
    Printer<double>::stream(s, indent + "  ", v.y_r);
    s << indent << "z_r: ";
    Printer<double>::stream(s, indent + "  ", v.z_r);
    s << indent << "yaw_r: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_r);
    s << indent << "x_l: ";
    Printer<double>::stream(s, indent + "  ", v.x_l);
    s << indent << "y_l: ";
    Printer<double>::stream(s, indent + "  ", v.y_l);
    s << indent << "z_l: ";
    Printer<double>::stream(s, indent + "  ", v.z_l);
    s << indent << "yaw_l: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_l);
  }
};

} // namespace message_operations
} // namespace ros

#endif // IKWALK_MESSAGE_TEST1_H
